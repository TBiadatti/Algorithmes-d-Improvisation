1. Énoncé 

Algorithmes d’improvisation



2. Description 

Ce projet permettra de faire de l'improvisation en live, en permettant de séquencer des patterns de batteries, de basse et de synthétiseurs en midi, et de traiter une banque de samples en audio. On pourra choisir différents algorithmes, pour les gammes ou séquences par exemples, ou la façon dont les samples seront traités (effets, longueur...). Il faudrait pouvoir lancer les algorithmes par midi et si possible pouvoir l'utiliser en tant que vst. Les algorithmes permettront des performances aléatoires. J'aimerais pouvoir proposer une interface minimaliste.

17/02/2019
Création d'un objet qui permettra de trigger un son de kick avec l'entrée audio d'une guitare, pour faire des rythmiques en direct.

21/02/2019
L'algorithme de trig guitare/kick fonctionne, encore quelques paramètres à régler pour que ça soit parfait, notamment au niveau du threshold.
Video : https://tinyurl.com/yyxjdqgm

3. Analyse des besoins 

Algorithmie : gammes et accords, séquences aléatoires
Samples : traitements et contrôles 
Interface : définir les éléments importants



4. Acquisition de connaissances 

Recherche sur les algorithmes de jeu aléatoire
Traitements et contrôles sur des fichiers audio

Inspiration pour le step sequencer pour la batterie :
http://write.flossmanuals.net/pure-data/step-sequencer/
J'en ai finalement trouvé un que j'ai commencé à modifier pour adapter à mes besoins (midi notamment)

Je me suis servi des exemples sur ce site pour la partie sampling :
http://www.pd-tutorial.com/english/ch03s04.html


5. Modèle 

Algorithmes : Ils vont définir différentes parties/intentions de jeu aléatoires, en envoyant du midi. On pourrait en avoir un qui lance des séquences plus rapides, un autre plus lent, un autre plus ambiant. 

Traitements : la façon dont seront gérés les samples, en fonction des algorithmes choisis. On pourrait avoir le contrôle sur les paramètres des effets, le début/longueur, enveloppe du son, etc..



6. Méthodes 

Un objet comprenant la parties algorithme : gammes/notes et séquençage aléatoire avant de l'envoyer en midi vers différents instruments.
Un objet traitant l'audio : chargement de plusieurs fichiers, effets et séquençage.


06/03/2019
Ajout du step sequencer pour la partie de drum, seul petit soucis : lorsqu'on clic pour ajouter un pattern, ça trig un message qui fait jouer la drum.
Ajout de gate pour stopper les différents algorithmes sans les exclure du tempo general.
Ménage sur la patch principale en mettant les algorithmes dans des boites personnelles.

21/03/2019
Ajout du début de travail sur la partie sampler : un premier module créé, le dossier contenant quelques samples et le début du module des effets.




################# Commentaires ################

Excellent projet!

Un patch de concert / environnement autonome me semble plus adapté pour ce projet qu'un VST. Sans parler de la charge de travail supplémentaire qu'implique la création du VST (avec JUCE par exemple), cela pourrait aussi s'avérer limitatif (un VST fait à partir d'une patch puredata restreint la programmation aux objets vanilla). À réfléchir!

10/10


